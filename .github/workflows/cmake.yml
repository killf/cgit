name: CMake

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_BUILD_TYPE: Release

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        mkdir build
        cd build
        cmake ..

    - name: Build
      # Build your program with the given configuration
      run: |
        cd build
        cmake --build . --config ${{ env.CMAKE_BUILD_TYPE }}
        ls

    - name: Upload Posix Build Artifact
      uses: actions/upload-artifact@v3.1.2
      if: runner.os != 'Windows'
      with:
        # Artifact name
        name: cgit_${{ runner.os }}
        # A file, directory or wildcard pattern that describes what to upload
        path: build/cgit
        retention-days: 15

    - name: Upload Windows Build Artifact
      uses: actions/upload-artifact@v3.1.2
      if: runner.os == 'Windows'
      with:
        # Artifact name
        name: cgit_${{ runner.os }}
        # A file, directory or wildcard pattern that describes what to upload
        path: build/${{ env.CMAKE_BUILD_TYPE }}/cgit.exe
        retention-days: 15
